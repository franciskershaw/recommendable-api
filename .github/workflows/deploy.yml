name: Deploy to DigitalOcean

on:
  push:
    branches: [main]
  workflow_dispatch:

# Add environment variables at workflow level
env:
  DOCKER_IMAGE: docker.io/${{ secrets.DOCKER_USERNAME }}/recommendable-api
  DOMAIN: api.recommendableapp.co.uk

jobs:
  # Add a build-and-push job that runs first
  build:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Docker credentials
        run: |
          echo "Docker username secret exists: ${{ secrets.DOCKER_USERNAME != '' }}"
          echo "Docker password secret exists: ${{ secrets.DOCKER_PASSWORD != '' }}"
          echo "DOCKER_IMAGE value: ${{ env.DOCKER_IMAGE }}"

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        timeout-minutes: 5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Tag current production as previous
        continue-on-error: true # Allow this step to fail on first deployment
        run: |
          if docker pull ${{ env.DOCKER_IMAGE }}:latest; then
            echo "Previous version exists, creating backup tag"
            docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.DOCKER_IMAGE }}:previous
            docker push ${{ env.DOCKER_IMAGE }}:previous
          else
            echo "No previous version found, skipping backup"
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        timeout-minutes: 15

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    concurrency:
      group: production_environment
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy Nginx configuration
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          source: "nginx/recommendable-api.conf"
          target: "/home/${{ secrets.DO_USERNAME }}/nginx/"
          strip_components: 1

      - name: Configure Nginx and SSL
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script_stop: true
          script: |
            echo "Starting nginx configuration..."
            
            # Debug: Show current directory and contents
            pwd
            ls -la /home/${{ secrets.DO_USERNAME }}/nginx/
            
            # Check existing configuration
            if [ -f "/etc/nginx/sites-available/api.recommendableapp.co.uk" ]; then
              echo "Checking existing nginx configuration..."
              if grep -q "ssl_certificate" "/etc/nginx/sites-available/api.recommendableapp.co.uk"; then
                echo "SSL configuration exists, preserving current nginx config"
                exit 0
              fi
            fi
            
            echo "Setting up new nginx config..."
            if [ ! -f "/home/${{ secrets.DO_USERNAME }}/nginx/recommendable-api.conf" ]; then
              echo "Error: nginx configuration file not found"
              exit 1
            fi
            
            # Move configuration file
            sudo mv "/home/${{ secrets.DO_USERNAME }}/nginx/recommendable-api.conf" "/etc/nginx/sites-available/api.recommendableapp.co.uk"
            sudo ln -sf "/etc/nginx/sites-available/api.recommendableapp.co.uk" "/etc/nginx/sites-enabled/"
            
            # Verify nginx configuration
            echo "Testing nginx configuration..."
            sudo nginx -t
            
            # Setup SSL if needed
            if [ ! -f "/etc/letsencrypt/live/api.recommendableapp.co.uk/fullchain.pem" ]; then
              echo "Setting up SSL certificate..."
              sudo certbot --nginx \
                -d api.recommendableapp.co.uk \
                --non-interactive \
                --agree-tos \
                --email ${{ secrets.CERTBOT_EMAIL }} \
                --redirect
            fi
            
            echo "Reloading nginx..."
            sudo systemctl reload nginx

      - name: Deploy Docker Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script_stop: true
          script: |
            # Deploy Docker container
            echo "Deploying Docker container..."

            echo "Cleaning up existing containers..."
            docker stop recommendable-api recommendable-api-new || true
            docker rm recommendable-api recommendable-api-new || true

            echo "Pulling latest image..."
            docker pull ${{ env.DOCKER_IMAGE }}:latest

            echo "Starting new container..."
            docker run -d \
              --name recommendable-api-new \
              --restart unless-stopped \
              --health-cmd="curl -f http://localhost:5400/health || exit 1" \
              --health-interval=30s \
              --health-timeout=5s \
              --health-retries=3 \
              -p 5400:5400 \
              -e NODE_ENV=production \
              -e PORT=5400 \
              -e MONGO_URI='${{ secrets.MONGO_URI }}' \
              -e CORS_ORIGIN='${{ secrets.CORS_ORIGIN }}' \
              -e FRONTEND_URL='${{ secrets.FRONTEND_URL }}' \
              -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
              -e JWT_REFRESH_SECRET='${{ secrets.JWT_REFRESH_SECRET }}' \
              -e GOOGLE_CLIENT_ID='${{ secrets.GOOGLE_CLIENT_ID }}' \
              -e GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}' \
              ${{ env.DOCKER_IMAGE }}:latest

            sleep 15

            if ! docker ps | grep -q "recommendable-api-new"; then
              echo "Container failed to start"
              docker logs recommendable-api-new
              exit 1
            fi

      - name: Health Check
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script_stop: true
          script: |
            HEALTH_CHECK_ATTEMPTS=0
            MAX_ATTEMPTS=10

            until [ $HEALTH_CHECK_ATTEMPTS -eq $MAX_ATTEMPTS ] || curl -sf http://localhost:5400/health > /dev/null; do
              echo "Attempt $((HEALTH_CHECK_ATTEMPTS + 1))/$MAX_ATTEMPTS"
              HEALTH_CHECK_ATTEMPTS=$((HEALTH_CHECK_ATTEMPTS + 1))
              sleep 3
            done

            if [ $HEALTH_CHECK_ATTEMPTS -eq $MAX_ATTEMPTS ]; then
              echo "Health check failed"
              docker logs recommendable-api-new
              exit 1
            fi

            echo "Container healthy, finalizing deployment..."
            docker stop recommendable-api || true
            docker rm recommendable-api || true
            docker rename recommendable-api-new recommendable-api

  # Best practice: Keep the rollback job
  rollback:
    needs: [build, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Rollback Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script_stop: true
          script: |
            docker pull ${DOCKER_IMAGE}:previous
            docker stop recommendable-api || true
            docker rm recommendable-api || true

            docker run -d \
              --name recommendable-api \
              --restart unless-stopped \
              -p ${PORT:-5400}:${PORT:-5400} \
              -e NODE_ENV=production \
              -e MONGO_URI='${{ secrets.MONGO_URI }}' \
              -e CORS_ORIGIN='${{ secrets.CORS_ORIGIN }}' \
              -e FRONTEND_URL='${{ secrets.FRONTEND_URL }}' \
              -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
              -e JWT_REFRESH_SECRET='${{ secrets.JWT_REFRESH_SECRET }}' \
              -e GOOGLE_CLIENT_ID='${{ secrets.GOOGLE_CLIENT_ID }}' \
              -e GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}' \
              ${DOCKER_IMAGE}:previous

            echo "Rollback completed"
